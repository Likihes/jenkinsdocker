pipeline{
    agent any
    tools{
        maven 'maven'
    }
    environment {
        DOCKERHUB_REPO = 'liki27/java-webapp-docker'
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub_credentials'  // The ID of the credentials you created
        CONTAINER_NAME = 'javawebappcontainer'
    }
    
    stages{
        stage("git checkout"){
            steps{
              checkout scmGit(branches: [[name: '*/master']], 
              userRemoteConfigs: [[url: 'https://github.com/Likihes/java-web-app-docker.git']])
            }
        }
        stage("Test_Parallel"){
            parallel{
                stage("complile"){
                    steps{
                        sh 'mvn clean compile'
                    }
                }

                stage("junit_testS"){
                    steps{
                        sh 'mvn clean test'
                    }
                }
            }
        }
        stage("Build War"){
            steps{
                sh 'mvn clean package'
            }

        }

        stage("Build Docker_Images"){
            steps{
                script {
                    def imageName = "${env.DOCKERHUB_REPO}:${env.BUILD_NUMBER}"
                    sh "docker build -t ${imageName} ."
                }
            }
        }

        stage("Docker login and push"){
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]){
                    script {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                        def imageName = "${env.DOCKERHUB_REPO}:${env.BUILD_NUMBER}"
                        sh "docker push ${imageName}"
                    }
                }
            }
        }

        stage("deploy container") {
            steps {
                sshagent(['Docker_ssh']) {
                    script {
                        def imageName = "${env.DOCKERHUB_REPO}:${env.BUILD_NUMBER}"
                        def containerName = "${env.CONTAINER_NAME}"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.12.116 docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.12.116 docker rm -f ${containerName} || true"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.12.116 docker run -d -p 8080:8080 --name ${containerName} ${imageName}"
                     }
                }
            }
        }
    }
}


